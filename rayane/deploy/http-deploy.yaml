apiVersion: v1
kind: Service
metadata:
  name: http-server-service
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: svc-port
  selector:
    app: http-server

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: http-server-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: http-server
  template:
    metadata:
      labels:
        app: http-server
    spec:
      containers:
      - name: http-server
        image: gcr.io/google_containers/echoserver:1.8
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
          limits:
            memory: 200Mi
            cpu: 200m
        ports:
        - containerPort: 8080
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

---
apiVersion: v1
kind: Service
metadata:
  name: http-server2-service
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: svc-port
  selector:
    app: http-server2

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: http-server2-conf
data:
  app.py: |
    #!/usr/bin/env python

    import http.server
    import socketserver
    from http import HTTPStatus

    class Handler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(HTTPStatus.OK)
            self.end_headers()
            self.wfile.write(b'Hello world')

    httpd = socketserver.TCPServer(('', 8080), Handler)
    httpd.serve_forever()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: http-server2-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: http-server2
  template:
    metadata:
      labels:
        app: http-server2
    spec:
      volumes:
      - name: config
        configMap:
          name: http-server2-conf
      containers:
      - name: http-server2
        image: python:3.9-alpine
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: config
          mountPath: /app.py
          subPath: app.py
        command:
        - /bin/sh
        - -c
        - python app.py
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
          limits:
            memory: 200Mi
            cpu: 200m
